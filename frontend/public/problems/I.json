{
    "pid": "I",
    "id": "I",
    "description": "# Calculator\n### Problem Description\n\nJimothy wants to test his digital calculator; however, he's a bit lazy. He decides to get Lemme to help him test it. The only problem is that Lemme is terrible at math. Lemme's \"test cases\" for Jimothy's calculator consist of simple arithmetic problems that use addition, subtraction, multiplication, and division of integers. Lemme writes down all the steps to solve each problem. Unfortunately, much of Lemme's work contains errors.\n\nTo solve this problem, **write a program that reads the evaluation steps of an arithmetic expression and identifies the location of the mathematical error (if an error exists).**\n\nLemme isn't a *terrible* helper; Jimothy can expect the following from any test cases Lemme writes out:\n\n - Lemme never makes more than one error in an entire problem's work.\n - The only types of errors that can be made are:\n   - Calculation error: when a part of the arithmetic expression is miscalculated. (e.g., if `2 * 12` is evaluated to 28, instead of 24)\n   - Order of Operations error: when the next step *should* be to evaluate one part of the expression (or “subexpression”), but a different subexpression is evaluated instead.\n\nJimothy's calculator can handle Order of Operations, so Lemme's work should follow Order of Operations... Evaluate different types of subexpressions in the following order:\n1. First, evaluate subexpressions inside parentheses, evaluating the “deepest” (innermost) pair of parentheses first.\n2. Then, evaluate multiplication and division.\n3. Finally, evaluate addition and subtraction.\n\nSubexpressions of the same type and at the same “depth” should be evaluated from left-to-right. (e.g., in the expression `2 * 6 / 3 * 8`, the subexpression `2 * 6` should be evaluated first)\n\nThe program should output the line and token number where the error occurs (using zero-based indexing). Tokens are individual parentheses, operators, or numbers. For example, the expression `(2 + 10 * 4) / 2` has the following 9 tokens:\n\n|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|<!-- -->|\n|---|---|---|---|---|---|---|---|---|---|\n|Token Index: |0|1|2|3|4|5|6|7|8|\n|Token: |`(`|`2`|`+`|`10`|`*`|`4`|`)`|`/`|`2`|\n\nAs a complete example, consider the evaluation steps shown below:\n\n```\nLine 0:\t  (2 + 10 * 4) / 2\nLine 1:\t  (2 + 36) / 2\nLine 2:\t  38 / 2\nLine 3:\t  19\n```\n\nThe error is a calculation error: the subexpression `10 * 4` should evaluate to 40, not 36. The program should therefore identify that an error occurred at line 1, token 3 (the location of the underlined token: `36`).\n\n## Writing Your Solution\nEnter your solution in the body of this method in the given code skeleton:\n\n### Method Signature\n\n - `tokens` provides all input lines for a test case, accessed with: `tokens[lineIndex][tokenIndex]`\n - Return the `errorLineIndex` and `errorTokenIndex`. If no errors occur in the input, return `0` for both of these outputs.\n\n#### Java\n```public static int[] identifyError(String[][] tokens)``` returning an `int` array: `{errorLineIndex, errorTokenIndex}`\n\n#### Python\n```def identifyError(tokens):``` returning a tuple: `(errorLineIndex, errorRowIndex)`\n\n### Sample Method Calls\n\n#### Java\n```\nidentifyError(new String[][] {\n\tnew String[] { \"(\", \"2\", \"+\", \"10\", \"*\", \"4\", \")\", \"/\", \"2\" },\n\tnew String[] { \"(\", \"2\", \"+\", \"36\", \")\", \"/\", \"2\" },\n\tnew String[] { \"38\", \"/\", \"2\" },\n\tnew String[] { \"19\" } });\n```\nreturns an `int` array containing `{ 1, 3 }` because a calculation error occurs at line 1, token 3.\n\n```\nidentifyError(new String[][] {\n\tnew String[] { \"7\", \"+\", \"-2\", \"*\", \"3\" },\n\tnew String[] { \"7\", \"+\", \"-6\" },\n\tnew String[] { \"1\" } });\n```\nreturns an `int` array containing `{ 0, 0 }` because no mathematical error occurred in the input steps.\n\n#### Python\n```\nidentifyError([\n\t[\"(\", \"2\", \"+\", \"10\", \"*\", \"4\", \")\", \"/\", \"2\"],\n\t[\"(\", \"2\", \"+\", \"36\", \")\", \"/\", \"2\"],\n\t[\"38\", \"/\", \"2\"],\n\t[\"19\"] ]);\n```\nreturns `(1, 3)` because a calculation error occurs at line 1, token 3.\n\n```\nidentifyError([\n\t[\"7\", \"+\", \"-2\", \"*\", \"3\"],\n\t[\"7\", \"+\", \"-6\"],\n\t[\"1\"] ]);\n```\nreturns `(0, 0)` because no mathematical error occurred in the input steps.\n\n## Testing Your Program from the Console\n### Console Input Format\nInput consists of a number of test cases. The input begins with one line containing the number of test cases that will follow, `numCases`. For each test case, the input proceeds as follows:\n - a line containing the number of evaluation lines that will follow as input, `numLines`\n - on each line, a single line of the arithmetic evaluation, progressing one step further from the previous line\n   - any amount of whitespace may separate the tokens of a line\n   - no “extra” parentheses tokens will be included:\n     - no parentheses will occur around an isolated number, e.g. `1 + (4) * 8`\n     - no double parentheses will occur, e.g. `2 * ((3 + 4))`\n     - no parentheses will occur around an entire evaluation line, e.g. `(2 + 4 * 8)`\n   - zero will never have a negative sign in front of it, e.g. `4 + -0 * 5`\n - a blank line at the end of each test case\n\n\n### Assumptions\n - 1 <= `numCases` <= 10\n - 2 <= `numLines` <= 100\n - individual tokens will be integers between -1000 and 1000, inclusive\n - expressions will never contain a “divide by zero” subexpression – that is, there will never appear a subexpression `X / 0`, where X is any number\n - The following very special subexpressions will never appear in any part of input expressions:\n   - `1 * 1 * 1`\n   - `1 / 1 / 1`\n   - `0 * 0 * 0`\n   - `0 + 0 + 0`\n   - `0 - 0 - 0`\n\n### Console Output Format\n - for each test case, a single line containing the line index and token index (both zero-based) of the error in the arithmetic evaluation, space-separated\n   - if a test case has no mathematical error, output a line index and token index of zero\n\n### Sample Run\n#### Input:\n```\n3\n4\n(2 + 10 * 4) / 2\n(2 + 36) / 2\n38 / 2\n19\n\n7\n9 + (2 * (1 - 0) + 3 * (5 – 6))\n9 + (2 * 1 + 3 * (5 – 6))\n9 + (2 * 4 * (5 – 6))\n9 + (2 * 4 * -1)\n9 + (8 * -1)\n9 + -8\n1\n\n3\n7 + -2 * 3\n7 + -6\n1\n```\n\n#### Output:\n```\n1 3\n2 5\n0 0\n```\n\n### Sample Run Explanation\nThe sample run has 3 test cases.\n\nThe first test case has 4 lines of evaluation. A calculation error occurs on line 1 at the token `36` (token index 3). The subexpression `10 * 4` in line 0 should’ve evaluated to 40, not 36.\n\nThe second test case has 6 lines of evaluation. An Order of Operations error occurs on line 2 at the token `4` (token index 5). This error occurred because the subexpression `1 + 3` was evaluated before the higher priority subexpression `5 – 6`. The latter should’ve been evaluated first because it lies within a deeper set of parentheses.\n\nThe third test case contains no calculation or Order of Operations errors, so \"0 0\" is printed.\n",
    "name": "Calculator",
    "division": "blue",
    "tests": [{
            "result": "",
            "include": false,
            "in": "3\n4\n(2 + 10 * 4) / 2\n(2 + 36) / 2\n38 / 2\n19\n\n7\n9 + (2 * (1 - 0) + 3 * (5 – 6))\n9 + (2 * 1 + 3 * (5 – 6))\n9 + (2 * 4 * (5 – 6))\n9 + (2 * 4 * -1)\n9 + (8 * -1)\n9 + -8\n1\n\n3\n7 + -2 * 3\n7 + -6\n1\n",
            "out": "1 3\n2 5\n0 0\n"
        },
        {
            "result": "",
            "include": false,
            "in": "7\n8\n2 + (2 * 4 - (1 + 3)) * 3 / 2 - 5\n2 + (2 * 4 - 4) * 3 / 2 - 5\n2 + (8 - 4) * 3 / 2 - 5\n2 + 4 * 3 / 2 - 5\n2 + 12 / 2 - 5\n14 / 2 - 5\n7 - 5\n2\n\n4\n(2 + 8 * 4) / 2\n(2 + 36) / 2\n38 / 2\n19\n\n5\n2 + ((5 - 6) * 3 + 2)\n2 + ((5 - 6) * 5)\n2 + (-1 * 5)\n2 + -5\n-3\n\n5\n2 + ((5 - 6) * 3 + 2)\n2 + (-1 * 3 + 2)\n2 + (-3 + 2)\n2 + -1\n1\n\n3\n1 + 2 * 1\n3 * 1\n3\n\n3\n1 + 2 * 1\n1 + 2\n3\n\n3\n1 + 1 * 1\n1 + 1\n2\n",
            "out": "5 0\n1 3\n1 9\n0 0\n1 0\n0 0\n0 0"
        },
        {
            "result": "",
            "include": false,
            "in": "1\n5\n(2 + 2) * -2 -2 -2\n4 * -2 -2 -2\n-8 -2 -2\n-8 -4\n-12\n",
            "out": "3 2"
        }
    ]
}