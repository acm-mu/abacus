{
    "tests": [{
            "result": "",
            "include": false,
            "in": "3\n10 2 4\n80 20 25\n150 50 60",
            "out": "[1010, 101, 22]\n[40, 3H, 3E, 3B, 38, 35]\n[30, 2m, 2k, 2i, 2g, 2e, 2c, 2a, 2Y, 2W, 2U]"
        },
        {
            "result": "",
            "include": false,
            "in": "3\n761 34 19\n14320 -8 9\n0 2 2",
            "out": "[221, 1I1, 1F5, 1CD, 1A2, 17H, 15B, 137, 115, R5, Q7, PB, OH, NP, N2, MD]\n[11011111110000, 201122101, 3133300, 424240, 150144, 56515, 33760, 21571]\n[0]"
        },
        {
            "result": "",
            "include": false,
            "in": "4\n50 90 63\n50 -20 -15\n9435 2 62\n1 2 62",
            "out": "[o]\n[110010]\n[10010011011011, 110221110, 2103123, 300220, 111403, 36336, 22333, 13843, 9435, 70A8, 5563, 43AA, 361D, 2BE0, 24DB, 1FB0, 1B23, 172B, 13BF, 1086, JAJ, HJ5, G93, F2A, DON, CPC, C0R, B6A, AEF, 9PB, 96R, 8LU, 85H, 7OK, 7A3, 6X0, 6KB, 67a, 5ZZ, 5P5, 5ER, 54I, 4cJ, 4TU, 4L5, 4CZ, 44R, 3jR, 3cZ, 3W0, 3PN, 3J1, 3Cd, 36U, 30R, 2pU, 2kd, 2fs, 2bF, 2Wf, 2SB]\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
        }
    ],
    "pid": "G",
    "description": "### Problem Description\n\nCassley now needs The Four Amigos help for her research. Famously, *The Book of Changes* makes use of a base-64 numbering system. Cassley believes the rough draft, however, uses a base-62 numbering system. She has devised a way to compare similarities between the number bases, but they need a way to generate the data to make those comparisons quickly.\n\nTo help Cassley and solve this problem, **write a program that will take an integer in decimal (base-10), a lower bound, and an upper bound and lists the decimal number in every base between (and including) the bounds.**\n\nThe program should implement base conversion manually, rather than simply calling native methods for base conversion such as Java's `Integer.toString(int x, int radix)`.\n\nThe possible digits for higher bases start with the numerical digits (0-9), then the capital letters (A-Z), then the lowercase letters (a-z). For example, base 40 may make use of the digits: `0,1,2,...,8,9,A,B,C,...,Y,Z,a,b,c,d`.\n\n## Writing Your Solution\nEnter your solution in the body of this method in the given code skeleton:\n\n### Method Signature\n#### Java\n```public static String[] multBaseConverter(int base10, int lwrBnd, int uprBnd)```\n\n#### Python\n```def multBaseConverter(base10, lwrBnd, uprBnd):```\n\n### Sample Method Calls\n#### Java\n`multBaseConverter(10, 2, 4)`\nreturns a `String` array containing the value `10` in bases 2, 3, and 4: `{\"1010\", \"101\", \"22\"}`\n\n#### Python\n`multBaseConverter(10, 2, 4)`\nreturns a list containing the value `10` in bases 2, 3, and 4: `[\"1010\", \"101\", \"22\"]`\n\n\n## Testing Your Program from the Console\n### Console Input Format\n* the first line contains `t`, the number of test cases\n* for each test case, a single line contains the following three integer inputs, space-separated:\n  * `base10`, the number in decimal (base 10)\n  * `lwrBnd`, the lowest base to which `base10` should be converted\n  * `uprBnd`, the highest base to which `base10` should be converted\n\n### Assumptions\n* 0 <= `t` <= 10\n* 2 <= `lwrBnd` <= 62\n* 2 <= `uprBnd` <= 62\n\n### Console Output Format\n* for each test, a single line with the output numbers, comma-separated and in brackets (e.g., print \"[1010, 101, 22]\")\n\n### Sample Runs\n\n#### Input:\n\n```\n2\n10 2 4\n100 15 20\n```\n\n#### Output:\n\n```\n[1010, 101, 22]\n[6A, 64, 5F, 5A, 55, 50]\n```\n\n### Sample Run Explanation\nThere are two tests in the sample run (`t` = 2).\n\nThe first test formats the value `10` in bases 2, 3, and 4. The second test formats the value `100` in bases 15, 16, 17, 18, 19, and 20.\n",
    "id": "G",
    "name": "Base Bounds",
    "skeletons": [{
            "language": "python",
            "file_name": "BaseBounds.py",
            "source": "def multBaseConverter(base10, lwrBnd, uprBnd):\n\t\"\"\"\n\tTODO: Complete this method which converts a decimal to all bases between two bounds\n\n\tParameters:\n\tbase10 --> the number to be converted, given in decimal (base 10)\n\tlwrBnd --> the lower bound of bases to which base10 will be converted to\n\tuprBnd --> the upper bound of bases to which base10 will be converted to\n\n\tReturns:\n\tallBases --> an array of base10 converted to bases between the lwrBnd and uprBnd\n\n\tNote: lwrBnd and uprBnd are INCLUDED in the final returned result.\n\tNote: Don't worry about null elements in the return array. The main method removes all null elements.        \n\t\"\"\"\n\n\t# Variable Declarations #\n\tallBases = []\n\n\treturn allBases\n\n\n# It is unnecessary to edit the \"main\" function of each problem's provided code skeleton.\n# The main function is written for you in order to help you conform to input and output formatting requirements.\ndef main():\n\t\n\tfor _ in range(int(input())):\n\t\t# User Input #\n\t\tinp = [int(s) for s in input().split(\" \")]\n\n\t\t# Terminal Output #\n\t\tprint(\"[%s]\" % (', '.join(multBaseConverter(inp[0], inp[1], inp[2])))) # Function call\n\nmain()\n"
        },
        {
            "NewValue1": "PracticeProblem.java",
            "language": "java",
            "source": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class BaseBounds {\n\n\t/*\n\t * It is unnecessary to edit the \"main\" method of each problem's provided code\n\t * skeleton. The main method is written for you in order to help you conform to\n\t * input and output formatting requirements.\n\t */\n\tpublic static void main(String[] args) {\n\n\t\t/* Variable Declarations */\n\t\tint num, lwrBnd, uprBnd;\n\t\tArrayList<String> outputList;\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint cases = in.nextInt();\n\t\tfor (; cases > 0; cases--) {\n\t\t\t/* User Input */\n\t\t\tnum = in.nextInt();\n\t\t\tlwrBnd = in.nextInt();\n\t\t\tuprBnd = in.nextInt();\n\n\t\t\t/* Function call */\n\t\t\t/* Converts the output of multBaseConverter to an ArrayList outputList. */\n\t\t\toutputList = new ArrayList<String>(Arrays.asList(multBaseConverter(num, lwrBnd, uprBnd)));\n\t\t\t/* Gets rid of any null elements in the ArrayList. */\n\t\t\toutputList.removeAll(Collections.singleton(null));\n\n\t\t\t/* Terminal Output */\n\t\t\tSystem.out.println(outputList.toString());\n\t\t}\n\t\tin.close();\n\t}\n\n\t/**\n\t * TODO: Complete the following method which converts a decimal to all bases between two bounds\n\t * \n\t * Note: lwrBnd and uprBnd are INCLUDED in the final returned result. \n\t * Note: Don't worry about null elements in the return array. The main method removes all null elements.\n\t * \n\t * @param base10 --> the number to be converted, given in decimal (base 10)\n\t * @param lwrBnd --> the lower bound of bases to which base10 will be converted to\n\t * @param uprBnd --> the upper bound of bases to which base10 will be converted to\n\t * @return allBases --> an array of base10 converted to bases between the lwrBnd and uprBnd\n\t */\n\tpublic static String[] multBaseConverter(int base10, int lwrBnd, int uprBnd) {\n\t\tString[] allBases = new String[63];\n\n\t\treturn allBases;\n\t}\n}\n",
            "file_name": "BaseBounds.java"
        }
    ],
    "division": "blue"
}