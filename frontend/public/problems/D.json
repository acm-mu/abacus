{
    "pid": "D",
    "id": "D",
    "description": "# Taylor Series\n### Problem Description\n\nSyrin did a fantastic job as a fill-in for the director of The Festival of Lights. The Four Amigos now hop on a train and take the Chunnel to the UK and arrive in Edinburgh, Scotland. Jimothy is a big mathematics history buff and decides to visit where Taylor series, a famous formula in Calculus, was created.\n\nOn his way to the historical site, he notices an advertisement stating that if he could write a program that can calculate the sine and cosine values of any given angle, he would get a free lifetime subscription to his favorite math history magazine titled, *Old Math, Old Dudes, New Concepts*.\n\nTo solve this problem, **write a program which uses the Taylor Series to calculate the sine and cosine of a specified angle.** The Taylor Series equation for sine and cosine are shown below.\n\n![](https://i.imgur.com/K86Frwv.png)\n\nThe program should implement these equations, rather than simply calling native `sin` and `cos` methods provided by common programming languages.\n\nThe program will accept input angles in degrees, so it should convert the angles to radians before applying the Taylor Series. That is, `x` in the above equations must be the value of an angle in radians. The following equation converts an angle from units of degrees to units of radians:\n\n`Radian value = Degrees value * (PI / 180)`\n\nFinally, the program cannot compute the summations for an infinite number of iterations (or it would never stop). The program should compute the cosine series through the `x ^ 40` term (`n` should range from 0 to 20), and the program should compute the sine series through the `x ^ 39` term (`n` should range from 0 to 19).\n\nNote: the exclamation mark is the factorial operator:\n```\n0! = 1\n1! = 1\n2! = 1 * 2\n3! = 1 * 2 * 3\n4! = 1 * 2 * 3 * 4\netc.\n```\n\n## Writing Your Solution\n\nEnter your solution in the body of this method in the given code skeleton:\n\n### Method Signature\n\n* `x` specifies an angle in units of degrees\n\n#### Java\n\n```public static double cos(double x)```\n\n```public static double sin(double x) ```\n\n- a `factorial` function is implemented for you\n\n#### Python\n\n```def cos(x):```\n\n```def sin(x):```\n\n### Sample Method Calls\n\n`cos(0.0)` \nreturns `1.0`\n\n`sin(0.0)` \nreturns `0.0`\n\n`cos(90.0)`\nreturns `0.5`\n\n`sin(90.0)`\nreturns `0.866`\n\n## Testing Your Program from the Console\n\n### Console Input Format\n\n* the first line contains the number of test cases, `t`\n* for each test, a line contains a decimal number `x`, the input angle in degrees\n\n### Assumptions\n\n* 0 <= `t` <= 10\n* 0.0 <= `x` < 360.0\n\n### Console Output Format\n\n* for each test, a single line with the sine and cosine of the input angle, separated by a space\n  * the output values should be rounded down to three decimal places\n\n### Sample Run\n\n#### Input:\n\n```\n2\n0.0\n30.0\n```\n\n#### Output:\n\n```\n0.000 1.000\n0.500 0.866\n```\n",
    "name": "Taylor Series",
    "division": "blue",
    "tests": [{
            "result": "",
            "include": false,
            "in": "5\n0\n90\n180\n270\n360\n",
            "out": "0.000 1.000\n1.000 0.000\n0.000 -1.000\n-1.000 0.000\n0.000 1.000\n"
        },
        {
            "result": "",
            "include": false,
            "in": "3\n8\n158\n312\n",
            "out": "0.139 0.990\n0.375 -0.927\n-0.743 0.669\n"
        },
        {
            "result": "",
            "include": false,
            "in": "3\n111\n222\n333\n",
            "out": "0.934 -0.358\n-0.669 -0.743\n-0.454 0.891\n"
        }
    ]
}